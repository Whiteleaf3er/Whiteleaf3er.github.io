<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>语义分割实例-DeeplabV3-MobilenetV2</title>
    <url>/2020/03/19/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E5%AE%9E%E4%BE%8B-DeeplabV3-MobilenetV2/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇文章主要通过<strong>DeeplabV3-MobilenetV2对VOC21</strong>分类数据集进行语义分割</p>
<p>网络结构可参考上一篇综述中的Deeplab部分，此篇文章主要介绍通用的数据集状况以及训练流程</p>
<a id="more"></a>

<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><h4 id="VOC数据集"><a href="#VOC数据集" class="headerlink" title="VOC数据集"></a>VOC数据集</h4><p>包括背景一共21个类别</p>
<p>dataset2文件夹中包括3个文件：</p>
<blockquote>
<p>dataset2 </p>
<blockquote>
<p>jpg -原图，未经处理，分辨率大小不统一</p>
</blockquote>
<blockquote>
<p>png - 打了标签后的图像，分辨率500 x 375 ， 依然不满足分辨率要求</p>
</blockquote>
<blockquote>
<p>train_data.txt</p>
</blockquote>
</blockquote>
<p>train-data.txt文件如图，存储的是原图和标签的文件名</p>
<p><img src="https://cdn.jsdelivr.net/gh/Whiteleaf3er/FigureBed/pictures/image-20200319164202932.png" alt="image-20200319164202932"></p>
<h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p>两个问题</p>
<p>第一个是分辨率不同，如何统一到需要的输入512 x 512</p>
<p>第二个是数据不经处理模型鲁棒性较低，如何使原始数据所含特征更加丰富</p>
<p>对于第一个问题，很容易想到直接resize((w,h))，但是问题出现了，直接拉伸收缩，图像会出现扭曲和失真，所以还需要点技巧是填补，在上下或左右填补黑色，来使最终分辨率统一</p>
<p>比如原图分辨率为256 x 128，通过第四行得到scale = 2，nw x nh = 512 x 256，先resize到nw x nh的状态，此时虽然不满足512 x 512，但是W已经满足了，只不过H高度矮了点，重点是没有失真，那么将矮的少的那一部分用黑色填充即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterbox_image</span><span class="params">(image, size, type)</span>:</span></span><br><span class="line">    iw, ih = image.size</span><br><span class="line">    w, h = size</span><br><span class="line">    scale = min(w/iw, h/ih)</span><br><span class="line">    nw = int(iw*scale)</span><br><span class="line">    nh = int(ih*scale)</span><br><span class="line">    </span><br><span class="line">    image = image.resize((nw,nh), Image.NEAREST)</span><br><span class="line">    <span class="keyword">if</span>(type==<span class="string">"jpg"</span>):</span><br><span class="line">        new_image = Image.new(<span class="string">'RGB'</span>, size, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">elif</span>(type==<span class="string">"png"</span>):</span><br><span class="line">        new_image = Image.new(<span class="string">'RGB'</span>, size, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    new_image.paste(image, ((w-nw)//<span class="number">2</span>, (h-nh)//<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> new_image,nw,nh</span><br></pre></td></tr></table></figure>

<p>第13行：后两个参数表示贴上去贴在哪——所贴位置的左上角</p>
<p>效果图是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Whiteleaf3er/FigureBed/pictures/image-20200319170205592.png" alt="image-20200319170205592"></p>
<p>接下来解决第二个问题，答案是数据增强，也就是增加一些噪声，比如颜色变，翻转，缩放等等</p>
<p>看看效果图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Whiteleaf3er/FigureBed/pictures/image-20200319170242538.png" alt="image-20200319170242538"></p>
<p>前16行通过双三次插值(Image.BICUBIC)调整到随机选定的缩放比例H x W</p>
<p>17-25行随机贴到全黑的图中</p>
<p>26-31行随机翻转图像，左右翻转即镜像</p>
<p>最后在rgb转化为hsv，随机加噪声造成图像扭曲</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_data</span><span class="params">(image, label, input_shape, jitter=<span class="number">.2</span>, hue=<span class="number">.2</span>, sat=<span class="number">1.1</span>, val=<span class="number">1.1</span>)</span>:</span></span><br><span class="line">    h, w = input_shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># resize image</span></span><br><span class="line">    rand_jit1 = rand(<span class="number">1</span>-jitter,<span class="number">1</span>+jitter) <span class="comment">#0.8-1.2</span></span><br><span class="line">    rand_jit2 = rand(<span class="number">1</span>-jitter,<span class="number">1</span>+jitter)</span><br><span class="line">    new_ar = w/h * rand_jit1/rand_jit2</span><br><span class="line">    scale = rand(<span class="number">.6</span>, <span class="number">1.4</span>)</span><br><span class="line">    <span class="keyword">if</span> new_ar &lt; <span class="number">1</span>:</span><br><span class="line">        nh = int(scale*h)</span><br><span class="line">        nw = int(nh*new_ar)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        nw = int(scale*w)</span><br><span class="line">        nh = int(nw/new_ar)</span><br><span class="line">    image = image.resize((nw,nh), Image.BICUBIC)</span><br><span class="line">    label = label.resize((nw,nh), Image.BICUBIC)</span><br><span class="line">    <span class="comment"># place image</span></span><br><span class="line">    dx = int(rand(<span class="number">0</span>, w-nw))</span><br><span class="line">    dy = int(rand(<span class="number">0</span>, h-nh))</span><br><span class="line">    new_image = Image.new(<span class="string">'RGB'</span>, (w,h), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    new_label = Image.new(<span class="string">'RGB'</span>, (w,h), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)) <span class="comment">#生成全黑的图</span></span><br><span class="line">    new_image.paste(image, (dx, dy)) <span class="comment"># 随机贴上去</span></span><br><span class="line">    new_label.paste(label, (dx, dy))</span><br><span class="line">    image = new_image</span><br><span class="line">    label = new_label</span><br><span class="line">    <span class="comment"># flip image or not</span></span><br><span class="line">    flip = rand()&lt;<span class="number">.5</span></span><br><span class="line">    <span class="keyword">if</span> flip: </span><br><span class="line">        image = image.transpose(Image.FLIP_LEFT_RIGHT)</span><br><span class="line">        label = label.transpose(Image.FLIP_LEFT_RIGHT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># distort image</span></span><br><span class="line">    hue = rand(-hue, hue)</span><br><span class="line">    sat = rand(<span class="number">1</span>, sat) <span class="keyword">if</span> rand()&lt;<span class="number">.5</span> <span class="keyword">else</span> <span class="number">1</span>/rand(<span class="number">1</span>, sat)</span><br><span class="line">    val = rand(<span class="number">1</span>, val) <span class="keyword">if</span> rand()&lt;<span class="number">.5</span> <span class="keyword">else</span> <span class="number">1</span>/rand(<span class="number">1</span>, val)</span><br><span class="line">    x = rgb_to_hsv(np.array(image)/<span class="number">255.</span>)</span><br><span class="line">    x[..., <span class="number">0</span>] += hue</span><br><span class="line">    x[..., <span class="number">0</span>][x[..., <span class="number">0</span>]&gt;<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    x[..., <span class="number">0</span>][x[..., <span class="number">0</span>]&lt;<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    x[..., <span class="number">1</span>] *= sat</span><br><span class="line">    x[..., <span class="number">2</span>] *= val</span><br><span class="line">    x[x&gt;<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    x[x&lt;<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    image_data = hsv_to_rgb(x)</span><br><span class="line">    <span class="keyword">return</span> image_data,label</span><br></pre></td></tr></table></figure>

<h2 id="训练-train-py"><a href="#训练-train-py" class="headerlink" title="训练-train.py"></a>训练-train.py</h2><ol>
<li><p>获取model ， model = Deeplabv3()</p>
</li>
<li><p>获取权重参数 </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">weights_path = get<span class="constructor">_file()</span></span><br><span class="line">model.load<span class="constructor">_weights(<span class="params">weight_path</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初步获取数据集，打开txt文件</p>
<p>with open() as f:</p>
<p>​    lines = f.readlines()</p>
</li>
<li><p>打乱行，划分训练集和验证集</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">np</span><span class="selector-class">.random</span><span class="selector-class">.seed</span>(10101)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">np</span><span class="selector-class">.random</span><span class="selector-class">.shuffle</span>(<span class="selector-tag">lines</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>保存CKPT的方式，隔几代保存一次</p>
<p>checkpoint_period = ModelCheckpoint()</p>
</li>
<li><p>学习率下降的方式，要考虑到前期大学习率，后期小学习率兼顾效率和效果，什么时候下降，一种方式是val_loss两次不下降就降低学习率来更细致的Train<br>reduce_lr = ReduceLROnPlateau()</p>
</li>
<li><p>早停,一种情况是val_loss几次不下降就说明训练OK了<br>early_stopping = EarlyStopping()</p>
</li>
<li><p>损失函数定义<br>K.binary_crossentropy()</p>
</li>
<li><p>优化器，其实compile时有一个参数就需要指定优化器</p>
   <figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">model.compile(<span class="attr">loss</span> = loss,</span><br><span class="line">      <span class="attr">optimizer</span> = Adam(<span class="attr">lr=1e-3),</span></span><br><span class="line">      <span class="attr">metrics</span> = ['accuracy'])</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="10">
<li><p>开始训练</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit_generator(generate_arrays_from_file(lines[:num_train], batch_size),</span><br><span class="line">        steps_per_epoch=max(<span class="number">1</span>, num_train//batch_size),</span><br><span class="line">        validation_data=generate_arrays_from_file(lines[num_train:], batch_size),</span><br><span class="line">        validation_steps=max(<span class="number">1</span>, num_val//batch_size),</span><br><span class="line">        epochs=<span class="number">30</span>,</span><br><span class="line">        initial_epoch=<span class="number">0</span>,</span><br><span class="line">        callbacks=[checkpoint_period, reduce_lr, early_stopping])</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存权重h5文件</p>
<p>model.save_weights（）</p>
</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实可以发现，通过model（）封装后，语义分割模型和图像分类主干代码基本一致，训练流程也无所差距</p>
]]></content>
      <categories>
        <category>滴滴实习-语义分割</category>
      </categories>
      <tags>
        <tag>语义分割</tag>
        <tag>Deeplab</tag>
        <tag>Mobilenet</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基本操作</title>
    <url>/2020/03/10/hexo%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Hexo添加menu中的分类-标签等"><a href="#Hexo添加menu中的分类-标签等" class="headerlink" title="Hexo添加menu中的分类/标签等"></a>Hexo添加menu中的分类/标签等</h2><p>博客最基本的需求就是对博文进行分类，初始化的Hexo只有首页和归档，如何进行添加呢？</p>
<ol>
<li>新建<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure>
这样会在/Hexo/source新建categories文件夹，里边包含index.md</li>
<li>处理index.md<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="number">-12</span><span class="number">-02</span> <span class="number">21</span><span class="string">:01:24</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure>
在其中加入type字段即可</li>
</ol>
<a id="more"></a>

<ol start="3">
<li><p>处理主题配置文件</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta">#about: /about/ || user</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>将其中的注释删除</p>
</li>
<li><p>部署</p>
<p> <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>
</li>
</ol>
<h2 id="发布博文"><a href="#发布博文" class="headerlink" title="发布博文"></a>发布博文</h2><ol>
<li><p>git bash新建<br><code>hexo new &quot;文章名称&quot;</code><br>\Hexo\source_posts会出现相关的文章名称.md文件</p>
</li>
<li><p>修改.md文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">title</span> <span class="comment">#文章標題</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="number">-06</span><span class="number">-01</span> <span class="number">23</span><span class="string">:47:44</span> <span class="comment">#文章生成時間</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">"Hexo教程"</span> <span class="comment">#文章分類目錄 可以省略</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#文章標籤 可以省略</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"> <span class="attr">description:</span> <span class="comment">#你對本頁的描述 可以省略</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>​    初始化只有title和data，添加categories和tags即可</p>
<ol start="3">
<li>撰写/保存/部署<br>其中不要忘记加入<code>&lt;!-- more --&gt;</code>进行摘要展示</li>
</ol>
<h2 id="常用的MD语法"><a href="#常用的MD语法" class="headerlink" title="常用的MD语法"></a>常用的MD语法</h2><p>​    MD用的少，word与latex比较熟悉，所以记录一下常用的</p>
<h4 id="标记与多重标记"><a href="#标记与多重标记" class="headerlink" title="标记与多重标记"></a>标记与多重标记</h4><p>使用&gt;与&gt;&gt;表示标记</p>
<blockquote>
<p>标记里再使用 </p>
<blockquote>
<p>标记</p>
</blockquote>
</blockquote>
<h4 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h4><p>使用1-6个#表示多级标题</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>+-*表示无序列表</p>
<ul>
<li>我的微信公众号</li>
<li>我的微信公众号</li>
<li>我的微信公众号</li>
</ul>
<ul>
<li>我的尾巴</li>
</ul>
<p>数字加英文.表示有序列表</p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p>
<hr>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>链接的文字放在[]中，链接地址放在随后的（）中<br><a href="https://www.zhihu.com/people/liu-hao-33-54" target="_blank" rel="noopener">我的知乎</a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>与链接基本一致，加入！即可<br><img src="https://raw.githubusercontent.com/smshen/MarkdownPhotos/master/Res/test.jpg" alt="微信"></p>
<p>但是如果为本地图片地址，采取如下的方式：</p>
<h6 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h6><ul>
<li>在配置文件<strong>_config.yml</strong>里修改：<code>post_asset_folder: true</code></li>
<li>在Hexo安装目录下执行:<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件</li>
<li>等待一段时间之后，再运行<code>hexo n &quot;文章标题&quot;</code>来生成博文时，<code>/source/_post</code>文件夹中除了<code>文章标题.md</code>外，还有一个同名文件夹。</li>
<li>在新的博文中想引入图片时，可以先把图片复制到博文的同名文件夹，然后在<code>.md</code>中按照常规的方式饮用图片即可，如<code>![你想输入的替代文字](博文标题/图片名.jpg)</code>。<strong>注意，此处的图片路径必须使用相对路径</strong></li>
<li>执行<code>hexo g</code>,检查生成的页面中图片的src地址。此时生成页面中图片src地址应该与页面的相对路径一致（具体路径取决于页面路径格式设置）</li>
</ul>
<h6 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h6><p>以上方法可以解决本地图片上传和引用的问题，但是在每个文章下建立资源文件夹好处是分类清楚，缺点是图片复用不方便，也不符合网站设计的一般规范。</p>
<p>所以我们可以第二种方案：</p>
<ul>
<li>在本地source中建立img文件夹，将引用到的图片全部放在此文件夹中。这样操作也便于图片的复用。</li>
<li><strong>注意，采用这种方法时无需修改_config.yml,也无需安装hexo-asset-image</strong></li>
</ul>
<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>*倾斜*<br>**加粗**<br>~~删除~~<br><em>倾斜</em><br><strong>加粗</strong><br><del>删除</del></p>
<h4 id="公式-转义"><a href="#公式-转义" class="headerlink" title="公式/转义"></a>公式/转义</h4><p>转移和latex等都差不多，用\即可</p>
<p>公式：</p>
<p>在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。</p>
<h6 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h6><p>Hexo 默认使用 hexo-renderer-marked 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签，比如在 markdown 语法中，下划线<code>_</code>代表斜体，会被渲染引擎处理为``标签。</p>
<p>因为类 Latex 格式书写的数学公式下划线<code>_</code>表示下标，有特殊的含义，如果被强制转换为``标签，那么 MathJax 引擎在渲染数学公式的时候就会出错。</p>
<p>类似的语义冲突的符号还包括<code>*</code>, <code>{</code>, <code>}</code>, <code>\\</code>等。 </p>
<h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>更换 Hexo 的 markdown 渲染引擎，hexo-renderer-kramed 引擎是在默认的渲染引擎 hexo-renderer-marked 的基础上修改了一些 bug ，两者比较接近，也比较轻量级。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">uninstall</span> hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-kramed <span class="comment">--save1212</span></span><br></pre></td></tr></table></figure>

<p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。<br>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的 escape 变量的值做相应的修改：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//escape: /^\\([<span class="string">\\`*&#123;&#125;\[\</span>](<span class="link"></span>)#$+\-.!_&gt;])/,</span><br><span class="line">escape: /^\\([<span class="string">`*\[\</span>](<span class="link"></span>)#$+\-.!_&gt;])/,1212</span><br></pre></td></tr></table></figure>

<p>这一步是在原基础上取消了对,{,}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//em: /^\b<span class="emphasis">_((?:_</span><span class="emphasis">_|[\s\S])+?)_</span>\b|^\<span class="emphasis">*((?:\*</span>\<span class="emphasis">*|[\s\S])+?)\*</span>(?!\*)/,</span><br><span class="line">em: /^\<span class="emphasis">*((?:\*</span>\<span class="emphasis">*|[\s\S])+?)\*</span>(?!\*)/,1212</span><br></pre></td></tr></table></figure>

<p>重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。</p>
<h6 id="在-Next-主题中开启-MathJax-开关"><a href="#在-Next-主题中开启-MathJax-开关" class="headerlink" title="在 Next 主题中开启 MathJax 开关"></a>在 Next 主题中开启 MathJax 开关</h6><p>如何使用了主题了，别忘了在主题（Theme）中开启 MathJax 开关，下面以 next 主题为例，介绍下如何打开 MathJax 开关。</p>
<p>进入到主题目录，找到 _config.yml 配置问题，把 math 默认的 false 修改为true，具体如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Equations Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default(true) will load mathjax/katex script on demand</span></span><br><span class="line">  <span class="comment"># That is it only render those page who has 'mathjax: true' in Front Matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">mathjax</span></span><br><span class="line">  <span class="comment">#engine: katex12345678910111234567891011</span></span><br></pre></td></tr></table></figure>

<p>还需要在文章的Front-matter里打开mathjax开关，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">index.html</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-07</span><span class="number">-05</span> <span class="number">12</span><span class="string">:01:30</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">--123456123456</span></span><br></pre></td></tr></table></figure>

<p>之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果代码量比较少，只有单行的话，可以用单反引号包起来，如下：<br><code>asd</code><br>如果多行就用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo操作</category>
      </categories>
      <tags>
        <tag>-hexo -md</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客</title>
    <url>/2020/03/08/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>为了规则、规律地进行记录与分享,主要分为以下4个方面</p>
<h2 id="c-刷题笔记"><a href="#c-刷题笔记" class="headerlink" title="c++/刷题笔记"></a>c++/刷题笔记</h2><h2 id="时事吐槽"><a href="#时事吐槽" class="headerlink" title="时事吐槽"></a>时事吐槽</h2><h2 id="学习-实习"><a href="#学习-实习" class="headerlink" title="学习/实习"></a>学习/实习</h2><h2 id="comment-share"><a href="#comment-share" class="headerlink" title="comment/share"></a>comment/share</h2>]]></content>
  </entry>
</search>
